;;; dotemacs -- my dot emacs init file

;;; Commentary:
;;; This is loaded from the real .emacs file

;;; Code:
(setenv "PATH" (concat (getenv "PATH") ":/home/chris/local/dart/dart-sdk/bin"))
(setq exec-path (append exec-path '("/home/chris/local/dart/dart-sdk/bin")))

(add-to-list 'load-path "~/.emacs.d/elisp")

;; Pub serve
(setq create-lockfiles nil)

;;(global-set-key " " 'set-mark-command)
;;(global-set-key "C-SPC" 'set-mark-command)
(global-set-key "´" 'end-of-line)

(global-set-key "\M-f" 'auto-fill-mode)
;;(global-set-key [home] 'beginning-of-line)
;;(global-set-key [end] 'end-of-line)
;;(global-set-key [delete] 'delete-char)

(global-unset-key [f1])
(global-set-key [f5] 'replace-string)
(global-set-key [f6] 'goto-line)
(global-set-key [f7] 'match-paren)
(defun match-paren (arg)
  "Go to the matching parenthesis if on parenthesis otherwise insert %."
  (interactive "p")
  (cond ((looking-at "\\s\(") (forward-list 1) (backward-char 1))
        ((looking-at "\\s\)") (forward-char 1) (backward-list 1))
        (t (self-insert-command (or arg 1)))))

(global-set-key "\C-x\C-m" 'execute-extended-command)
(global-set-key "\C-c\C-m" 'execute-extended-command)
(global-unset-key "\C-xm")
(global-set-key "\C-xm" 'execute-extended-command)

(global-set-key "\C-w" 'backward-kill-word)
(global-set-key "\C-x\C-k" 'kill-region)
(global-set-key "\C-c\C-k" 'kill-region)

(global-set-key [?\C-x?\C-\;] 'comment-or-uncomment-region)

(global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)
(global-set-key (kbd "C->") 'mc/mark-next-like-this)
(global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
(global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)

;; I want Ctrl-y to paste most recent x-selection. These batshit crazy
;; settings are apparently the way to do this in latest builds of
;; emacs 24.  See http://comments.gmane.org/gmane.emacs.devel/135060
(setq interprogram-paste-function 'x-cut-buffer-or-selection-value)
(global-set-key [mouse-2] 'mouse-yank-at-click)
(setq mouse-drag-copy-region t)
(setq select-active-regions nil)
(setq x-select-enable-primary t)
(setq x-select-enable-clipboard nil)

(setq require-final-newline t)
(setq auto-save-mode nil)

(global-auto-revert-mode t)

(setq make-backup-files nil)
(setq auto-save-default nil)
(setq-default tab-width 2)
(setq-default indent-tabs-mode nil)
(setq inhibit-startup-message t)

(fset 'yes-or-no-p 'y-or-n-p)

(delete-selection-mode t)
(menu-bar-mode -1)
(scroll-bar-mode -1)
(tool-bar-mode -1)
(blink-cursor-mode t)
(show-paren-mode t)
(column-number-mode t)
;; (set-fringe-style -1)
;; (tooltip-mode -1)
(ido-mode t)

(add-to-list 'default-frame-alist '(height . 24))
(add-to-list 'default-frame-alist '(width . 90))

;;(set-frame-parameter (selected-frame) 'alpha '(<active> [<inactive>]))
(set-frame-parameter (selected-frame) 'alpha '(95 60))
(add-to-list 'default-frame-alist '(alpha 95 60))

;; (add-to-list 'custom-theme-load-path "~/.emacs.d/themes")
(load "~/.emacs.d/elisp/pmade-colors")


;; Packages
(setq package-list
      '(adoc-mode
        company
        company-web
        dart-mode
        feature-mode
        flycheck
        js2-mode             ; Improved JavaScript editing mode
        haml-mode
        magit                ; control Git from Emacs
        markdown-mode        ; Emacs Major mode for Markdown-formatted files
        material-theme       ; A Theme based on Google Material Design
        multiple-cursors     ; Multiple cursors for Emacs
        pabbrev
        rhtml-mode
        rvm
        sass-mode
        web-mode
        yaml-mode
        ))

(require 'package)
(add-to-list 'package-archives
  '("melpa" . "http://melpa.milkbox.net/packages/") t)
;; (add-to-list 'package-archives
;;              '("melpa-stable" . "https://stable.melpa.org/packages/") t)
(package-initialize)

; fetch the list of packages available
(unless package-archive-contents
  (package-refresh-contents))

; install the missing packages
(dolist (package package-list)
  (unless (package-installed-p package)
    (package-install package)))

(global-flycheck-mode)

;; Mode hooks
(add-to-list
  'auto-mode-alist (cons "\\.asc\\'" 'adoc-mode))
(add-hook 'adoc-mode-hook (lambda()
  (buffer-face-mode -1)))

(add-to-list 'auto-mode-alist '("\.feature$" . feature-mode))

(add-to-list 'hs-special-modes-alist
	     '(ruby-mode
	       "\\(def\\|do\\|{\\)" "\\(end\\|end\\|}\\)" "#"
	       (lambda (arg) (ruby-end-of-block)) nil))

(add-to-list 'auto-mode-alist '("Capfile" . ruby-mode))
(add-to-list 'auto-mode-alist '("Gemfile" . ruby-mode))
(add-to-list 'auto-mode-alist '("Rakefile" . ruby-mode))
(add-to-list 'auto-mode-alist '("\\.rake\\'" . ruby-mode))
(add-to-list 'auto-mode-alist '("\\.rb\\'" . ruby-mode))
(add-to-list 'auto-mode-alist '("\\.ru\\'" . ruby-mode))

(add-hook 'ruby-mode-hook '(lambda ()
                             (setq ruby-deep-arglist t)
                             (setq ruby-deep-indent-paren nil)
                             (setq c-tab-always-indent nil)
                             ))

(add-to-list 'auto-mode-alist '("\\.yml$" . yaml-mode))
(add-to-list 'auto-mode-alist '("\\.yaml$" . yaml-mode))

(add-hook 'css-mode-hook '(lambda ()
                            (setq css-indent-level 2)
                            (setq css-indent-offset 2)))

(add-to-list 'auto-mode-alist '("\\.md$" . markdown-mode))

(require 'web-mode)
(add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.rhtml?\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.rjs?\\'" . web-mode))

(defun my-web-mode-hook ()
  "Hooks for Web mode."

  (setq web-mode-enable-current-element-highlight t)
  (setq web-mode-enable-current-column-highlight t)

  (setq web-mode-markup-indent-offset 2)
  (setq web-mode-css-indent-offset 2)
  (setq web-mode-code-indent-offset 2)

  (set-face-attribute 'web-mode-html-tag-face nil
                      :foreground "#E8BF6A")
  (set-face-attribute 'web-mode-html-attr-name-face nil
                      :foreground "#E8BF6A")
  ;; (set-face-attribute 'web-mode-html-attr-value-face nil
  ;;                     :foreground "#E8BF6A"
  ;;                     :weight 'bold)
  (set-face-attribute 'web-mode-current-element-highlight-face nil
                      :background "#4e4c46"
                      :foreground "#dcdcdc")
  (set-face-attribute 'web-mode-symbol-face nil
                      :foreground "#cccaee")

  (setq web-mode-extra-snippets
        '(
          (nil
           .
           (
            ("polymer-smoke" . "<!doctype html>\n<html lang=\"en\">\n  <head>\n    <title>TITLE</title>\n\n    <!-- 1. Load the polymer platform. -->\n    <script\n       src=\"bower_components/webcomponentsjs/webcomponents.js\"></script>\n    <!-- 2. Load component(s) -->\n    <link rel=\"import\" href=\"elements/|x-element.html\">\n  </head>\n  <body unresolved>\n    <div class=\"container\">\n      <h1>TITLE</h1>\n      <x-element></x-element>\n    </div>\n  </body>\n</html>")
            ("polymer-el" . "<link rel=\"import\" href=\"../bower_components/polymer/polymer.html\">\n<dom-module name=\"|x-element\">\n  <template>\n    <h1>x-element</h1>\n  </template>\n  <script>\n    Polymer({is: 'x-element'})\n  </script>\n</dom-module>")
            ("polymer-test-html" . "<!doctype html>\n<html>\n  <head>\n    <title>Tests</title>\n    <script src=\"../bower_components/webcomponentsjs/webcomponents.js\"></script>\n    <script src=\"../bower_components/web-component-tester/browser.js\"></script>\n    <link rel=\"import\" href=\"../elements/|x-element.html\">\n  </head>\n  <body>\n\n    <test-fixture id=\"simple\">\n      <template>\n        <x-element></x-element>\n      </template>\n    </test-fixture>\n\n    <script src=\"tests.js\"></script>\n\n  </body>\n</html>")
            ("polymer-test-js" . "describe(\"<x-element>\", function(){\n  var el;\n  beforeEach(function(){\n    el = fixture(\"simple\");\n  });\n\n  it(\"has a shady DOM\", function(){\n    assert.equal(\"x-element\", el.tagName.toLowerCase());\n    assert.isDefined(el.root);\n  });\n});")
            )
           )
          )
        )
)
(add-hook 'web-mode-hook  'my-web-mode-hook)

(add-hook 'before-save-hook 'delete-trailing-whitespace)

(add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))
(setq-default js-indent-level 2)
(setq-default js2-basic-offset 2)
(setq-default js2-bounce-indent-p t)
(setq-default js2-cleanup-whitespace t)
(setq-default js2-cleanup-whitespace t)
(setq-default js2-global-externs '("module" "require" "buster" "sinon" "assert" "refute" "setTimeout" "clearTimeout" "setInterval" "clearInterval" "location" "__dirname" "console" "JSON" "Polymer" "describe" "beforeEach" "afterEach" "it" "context" "fixture"))

(add-to-list 'auto-mode-alist '("\\.dart\\'" . dart-mode))
(setq dart-enable-analysis-server t)
(add-hook 'dart-mode-hook 'flycheck-mode)

;; Ugh. No erlang-mode in elpa?
;; (setq load-path (cons (concat "/usr/share/"
;; 		(symbol-name debian-emacs-flavor)
;; 		"/site-lisp/erlang") load-path))
;;(add-to-list 'load-path "/usr/share/emacs/site-lisp/erlang")
;;(setq erlang-root-dir "/usr/lib/erlang")
;;(setq exec-path (cons "/usr/lib/erlang/bin" exec-path))
;;(require 'erlang-start)

(defun duplicate-line()
  (interactive)
  (move-beginning-of-line 1)
  (kill-line)
  (yank)
  (open-line 1)
  (next-line 1)
  (yank)
)
(global-set-key "\C-c\C-d" 'duplicate-line)

;; my macros
(fset 'wrap-p
   [?  ?  ?< ?p ?> ?\C-e ?< ?/ ?p ?> down down ?\C-a])
(global-set-key "\M-p" 'wrap-p)

(fset 'temporary-link
   [?\C-s ?< ?< ?\C-m backspace backspace ?\[ ?\[ ?\C-s ?\] ?\] ?\C-? ?\C-? ?> ?> ?\C-m backspace backspace ?\] ?\]])

(fset 'mark-section
   [?\C-x ?\C-m ?r ?e ?g tab backspace backspace backspace ?s ?e tab ?a ?r tab ?r tab backspace return ?\C-k tab ?f ?o ?r tab ?- ?r tab return ?^ ?= ?= ?= ?  return backspace backspace backspace backspace ?  ?  ?< ?/ ?s ?e ?c ?t ?1 ?> return ?  ?  ?< ?s ?e ?c ?t ?1 ?> return ?  ?  ?  ?  ?< ?t ?i ?t ?l ?e ?> ?\C-e ?< ?/ ?t ?i ?t ?l ?e ?>])
(global-set-key "\M-s" 'mark-section)

(fset 'start-sect2
   [?\C-x ?\C-m ?s ?e ?r ?f backspace backspace ?e backspace ?a ?r tab ?f ?o ?r tab ?- ?r ?e tab return ?^ ?= ?= ?= ?= ?  return backspace backspace backspace backspace backspace backspace ?  ?  ?< ?s ?e ?c ?t ?2 ?> return ?  ?  ?  ?  ?< ?t ?i ?t ?l ?e ?> ?\C-e ?< ?/ ?t ?i ?t ?l ?e ?>])
(global-set-key "\M-2" 'start-sect2)

(fset 'replace-code-inline
   [?\C-s ?s ?o ?u ?r ?c ?e ?, ?\C-m ?\C-w backspace ?  ?  ?< ?c ?o ?d ?e ?  ?l ?a ?n ?g ?u ?a ?g ?e ?= ?\" ?\C-e backspace ?\" ?> down ?\C-a ?\C-k ?\C-k ?\C-s ?- ?- ?- ?- ?\C-m ?\C-a ?\C-k ?  ?  ?< ?/ ?c ?o ?d ?e ?>])
(global-set-key "\C-ci" 'replace-code-inline)

(fset 'replace-code-linked
   [?\C-s ?: ?: ?i ?n ?c ?l ?u ?d ?e ?s ?\C-m right ?\C-  up up ?\C-a ?\C-x ?\C-k ?  ?  ?  ?  ?< ?c ?o ?d ?e ?  ?f ?i ?l ?e ?= ?\" ?c ?o ?d ?e ?/ ?\C-e backspace backspace ?\" ?  ?/ ?> down backspace backspace backspace backspace backspace])
(global-set-key "\C-cl" 'replace-code-linked)


(fset 'convert-small-admonition
   [?  ?  ?< ?s ?i ?d ?e ?b ?a ?r ?> ?T ?i ?t backspace backspace backspace ?< ?t ?i ?t ?l ?e ?> ?\M-c ?< ?/ ?t ?i ?t ?l ?e ?> ?\C-d ?\C-d ?\C-d return ?\M-p ?\M-p up ?< ?/ ?s ?i tab return])
(global-set-key "\C-ca" 'convert-small-admonition)

(fset 'inline-code
   [?\C-s ?` ?\C-m backspace ?< ?i ?c ?> ?\C-s ?` ?\C-m backspace ?< ?/ ?i ?c ?>])
(global-set-key "\M-q" 'inline-code)

(provide 'dotemacs)
;;; dotemacs ends here
